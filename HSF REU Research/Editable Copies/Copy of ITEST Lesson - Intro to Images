{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ITEST Lesson - Intro to Images","provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyNY2/8hkJMJzTAWldTM6Zb2"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"6WLxBN56AsER"},"source":["# **Intro to Images**\r\n","\r\n","##Purpose \r\n","Lorem ipsum dolor sit amet, consectetur adipiscing elit.\r\n","\r\n","##Necessary Requirements\r\n","Lorem ipsum dolor sit amet, consectetur adipiscing elit.\r\n","\r\n","##Expected Output\r\n","Lorem ipsum dolor sit amet, consectetur adipiscing elit."]},{"cell_type":"markdown","metadata":{"id":"22Yr5A5vAwad"},"source":["# **Python Setup**"]},{"cell_type":"markdown","metadata":{"id":"fQWVSkozA7Wm"},"source":["##Imports"]},{"cell_type":"code","metadata":{"id":"yyjv_gkhAnfR","executionInfo":{"status":"ok","timestamp":1612994583199,"user_tz":420,"elapsed":1230,"user":{"displayName":"Michael Li","photoUrl":"","userId":"16803643686007598062"}}},"source":["import numpy as np\r\n","import cv2\r\n","import matplotlib.pyplot as plt\r\n","\r\n","from google.colab import drive\r\n","from google.colab import files\r\n","\r\n","import ipywidgets as widgets"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ke_eqtZ8A5cv"},"source":["##Functions"]},{"cell_type":"code","metadata":{"id":"8PmZh-PTA80Q","executionInfo":{"status":"ok","timestamp":1612994583201,"user_tz":420,"elapsed":1227,"user":{"displayName":"Michael Li","photoUrl":"","userId":"16803643686007598062"}}},"source":["executed_cells = {}\r\n","\r\n","'''\r\n","check_cell - Runs at the start of cells, gives the user a prompt to check if they ran the previous cells at least once\r\n","'''\r\n","def check_cell(num):\r\n","    if len(executed_cells) < num :\r\n","      print('It looks like you tried to run cell ' + str(num) + ', but you should run them in order! Make sure you ran all previous cells at least once.')\r\n","      raise\r\n","    elif str(num) not in executed_cells.keys():\r\n","      executed_cells[str(num)] = num\r\n","\r\n","# Displays an image, converts BGR to RGB\r\n","def display_img(a, title = \"Original\"):\r\n","    a = cv2.cvtColor(a, cv2.COLOR_BGR2RGB)\r\n","    plt.imshow(a), plt.title(title)\r\n","    plt.show()\r\n","\r\n","# Displays an RGB image\r\n","def display_rgb_img(a, title = \"Original\"):\r\n","    plt.imshow(a), plt.title(title)\r\n","    plt.show()\r\n","\r\n","def file_upload():\r\n","  uploaded = files.upload()\r\n","  # for fn in uploaded.keys():\r\n","    # print('User uploaded file \"{name}\" with length {length} bytes'.format(\r\n","    #    name=fn, length=len(uploaded[fn])))\r\n","  return uploaded.keys()\r\n","\r\n","def list(x):\r\n","  global filtered_image\r\n","  filtered_image = filter(im, x)\r\n","  display_img(filtered_image, title=x)\r\n","\r\n","def filter(image, type, custom_kernel=None):\r\n","    if type in filters:\r\n","        kernel = filters.get(type)\r\n","        print(kernel)\r\n","    elif custom_kernel is not None:\r\n","        kernel = custom_kernel\r\n","    elif type is \"gaussian\":\r\n","        return cv2.GaussianBlur(image, (35, 35), 0)\r\n","    elif type is \"csharpen\":\r\n","        ilambda = 0.1\r\n","        kernel = filters.get('laplacian') + (ilambda * filters.get('lowpass'))\r\n","        return cv2.filter2D(image, -1, kernel)\r\n","    else:\r\n","        return image\r\n","    return cv2.filter2D(image, -1, kernel)"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"RHJKxc3QQEza","executionInfo":{"status":"ok","timestamp":1612994583202,"user_tz":420,"elapsed":1226,"user":{"displayName":"Michael Li","photoUrl":"","userId":"16803643686007598062"}}},"source":["check_cell(0) # Checks to make sure that previous cells are ran\r\n","\r\n","filtered_image = np.array(1)\r\n","\r\n","filters = {\r\n","    'none': np.array([ 1 ]),\r\n","    'emboss': np.array([[0, -1, -1],\r\n","                        [1, 0, -1],\r\n","                        [1, 1, 0]]),\r\n","           \r\n","    'highpass': np.array([[0.0, -1.0, 0.0],\r\n","                          [-1.0, 4.0, -1.0],\r\n","                          [0.0, -1.0, 0.0]]),\r\n","           \r\n","    'laplacian': np.array([[-1, 0, 1],\r\n","                           [-1, 0, 1],\r\n","                           [-1, 0, 1]]),\r\n","           \r\n","    'lowpass': np.array([[0, 0, 0],\r\n","                         [0, 5, 0],\r\n","                         [0, 0, 0]]),\r\n","           \r\n","    'sepia': np.array([[0.272, 0.534, 0.131],\r\n","                       [0.349, 0.686, 0.168],\r\n","                       [0.393, 0.769, 0.189]]),\r\n","           \r\n","    'sharpen': np.array([[-1, -1, -1],\r\n","                        [-1, 9, -1],\r\n","                        [-1, -1, -1]])\r\n","}\r\n","filter_list = filters.keys()\r\n","filter_list = [key for key in filter_list]\r\n","filter_list = filter_list + ['gaussian', 'csharpen']"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MbLN01WtJTTm"},"source":["## Download Example Image"]},{"cell_type":"code","metadata":{"id":"y_BitrQOJWuN"},"source":["check_cell(1) # Checks to make sure that previous cells are ran\r\n","\r\n","!wget --no-check-certificate \\\r\n","    https://github.com/saesus/NSF_REU_Colab/blob/master/Intro%20to%20Images/wheres%20waldo.jpg?raw=true \\\r\n","    -O whereswaldo.jpg"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9vku73AgKcjZ"},"source":["## Preloading Image for the User"]},{"cell_type":"code","metadata":{"id":"LPo89hVVKbOd","executionInfo":{"status":"ok","timestamp":1612994584050,"user_tz":420,"elapsed":2067,"user":{"displayName":"Michael Li","photoUrl":"","userId":"16803643686007598062"}}},"source":["check_cell(2) # Checks to make sure that previous cells are ran\r\n","\r\n","waldo = cv2.imread('whereswaldo.jpg')"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"btfCF656P3-6"},"source":["# **Exercises**"]},{"cell_type":"markdown","metadata":{"id":"dUufZ1csA-aR"},"source":["##Create a Pixel \r\n","pixel = np.array(<font color='red'>[255,255,255]</font>) <br>\r\n","A pixel is composed of 3 values! The <font color='red'>red</font>, <font color='green'>green</font>, and <font color='blue'>blue</font> values. These can combine to create a lot of colors - around 16 million in total!\r\n","\r\n","[insert image detailing pixels more] <br>\r\n","[placeholder image] <br>\r\n","<img src=\"https://drive.google.com/uc?export=view&id=1B-7RHuoHDaHq3oIHvkxHFv1OUDhmdN5N\" width=\"250\">"]},{"cell_type":"code","metadata":{"id":"ySfXQtX0BBy7","executionInfo":{"status":"ok","timestamp":1612994584050,"user_tz":420,"elapsed":2065,"user":{"displayName":"Michael Li","photoUrl":"","userId":"16803643686007598062"}}},"source":["check_cell(3) # Checks to make sure that previous cells are ran\r\n","\r\n","pixel = np.array([1,255,255])\r\n","one_d_im = np.array([pixel])\r\n","two_d_im = np.array([one_d_im])"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lkmpA_QDBVC3"},"source":["Display the pixel!"]},{"cell_type":"code","metadata":{"id":"98CNWxCRBWxX"},"source":["check_cell(4) # Checks to make sure that previous cells are ran\r\n","\r\n","display_rgb_img(two_d_im)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"C8RGAYSICdUb"},"source":["##Load an Image"]},{"cell_type":"markdown","metadata":{"id":"fESaFqcyCgas"},"source":["Let's try to load in an image. Drag and drop an image into the prompt below after running the cell, or click for a popup!"]},{"cell_type":"code","metadata":{"id":"_qDKyS2bCma7"},"source":["check_cell(5) # Checks to make sure that previous cells are ran\r\n","\r\n","file_upload()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6bLoh3gVC9iK"},"source":["Load in the file. You'll need to type the file name in between the quotation marks, with the extension. <br>\r\n","For example, in this case the file name is <font color='red'>cat.jpg</font> <br>\r\n","<font color='blue'>im</font> = cv2.imread('<font color='red'>cat.jpg</font>') <br>\r\n","The computer will remember this file as the variable name, in this case <font color='blue'>im</font>"]},{"cell_type":"code","metadata":{"id":"enjmAX0UDD21","executionInfo":{"status":"ok","timestamp":1612994646718,"user_tz":420,"elapsed":467,"user":{"displayName":"Michael Li","photoUrl":"","userId":"16803643686007598062"}}},"source":["check_cell(6) # Checks to make sure that previous cells are ran\r\n","\r\n","im = cv2.imread('')"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CgMl7OB3Dp4A"},"source":["If everything went well, the image should be displayed below after running the cell!"]},{"cell_type":"code","metadata":{"id":"9NLz74QBDyd2"},"source":["check_cell(7) # Checks to make sure that previous cells are ran\r\n","\r\n","display_img(im, 'User Input')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fvaR-IPVDtX7"},"source":["##Flipping the Image"]},{"cell_type":"markdown","metadata":{"id":"IIH-GekYD8tn"},"source":["Left/Right (opencv or manually?)"]},{"cell_type":"code","metadata":{"id":"qmS48ojBH98_","executionInfo":{"status":"ok","timestamp":1612994654563,"user_tz":420,"elapsed":479,"user":{"displayName":"Michael Li","photoUrl":"","userId":"16803643686007598062"}}},"source":["check_cell(8) # Checks to make sure that previous cells are ran\r\n","\r\n","im_flip_lr = cv2.flip(im, 1)\r\n","\r\n","display_img(im_flip_lr, 'Left/Right')"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KYeXX9wHIP_R"},"source":["Up/Down"]},{"cell_type":"code","metadata":{"id":"HgwOeKd-IQxc","executionInfo":{"status":"ok","timestamp":1612994662444,"user_tz":420,"elapsed":1679,"user":{"displayName":"Michael Li","photoUrl":"","userId":"16803643686007598062"}}},"source":["check_cell(9) # Checks to make sure that previous cells are ran\r\n","\r\n","im_flip_ud = cv2.flip(im, 0)\r\n","\r\n","display_img(im_flip_ud, 'Up/Down')"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y5pVgJbPIl76"},"source":["##Cropping"]},{"cell_type":"markdown","metadata":{"id":"XSfTQWhaKwkG"},"source":["Let's crop the waldo image! It's displayed below. "]},{"cell_type":"code","metadata":{"id":"jiwFLPqbKzGj"},"source":["check_cell(10) # Checks to make sure that previous cells are ran\r\n","\r\n","display_img(waldo)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1w7JiaezLJ-2"},"source":["The dimensions of the waldo picture are listed below. "]},{"cell_type":"code","metadata":{"id":"_AynBJLPIlGQ","executionInfo":{"status":"aborted","timestamp":1612994612591,"user_tz":420,"elapsed":30556,"user":{"displayName":"Michael Li","photoUrl":"","userId":"16803643686007598062"}}},"source":["print(len(waldo), len(waldo[0]))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GyCWghkLLNrC"},"source":["Images are stored on computers in matrices! These are usually 2-3 dimensional matrices. Each pixel on the screen is held as an x,y value, with a RGB value in each of these points for RGB images! For grayscale, there is just a single value. If we had a single pixel for an image, we would have <br>\r\n","\r\n","im [y value] [x value] [RGB value], which would become <br>\r\n","&nbsp;&nbsp;&nbsp;&nbsp;  R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; G&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B <br>\r\n"," (0-255, 0-255, 0-255)\r\n","\r\n","We can see this as a 4 pixel image now! <br>\r\n","\r\n","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  1\r\n","\r\n","0&nbsp;&nbsp;(5,5,5)&nbsp;&nbsp;(5,5,5)\r\n","\r\n","1&nbsp;&nbsp;(5,5,5)&nbsp;&nbsp;(5,5,5)\r\n","\r\n","\r\n"]},{"cell_type":"markdown","metadata":{"id":"gjI2m8s2Lqm_"},"source":["###Start back at this point if the crop is off"]},{"cell_type":"code","metadata":{"id":"ib7DApRFLSgW","executionInfo":{"status":"ok","timestamp":1612994703718,"user_tz":420,"elapsed":385,"user":{"displayName":"Michael Li","photoUrl":"","userId":"16803643686007598062"}}},"source":["check_cell(11) # Checks to make sure that previous cells are ran\r\n","\r\n","crop = waldo[0:120, 175:250]"],"execution_count":22,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jmDqjFbHLnjR"},"source":["Let's see how you cropped it!"]},{"cell_type":"code","metadata":{"id":"tlRIT8HgLcAk"},"source":["check_cell(12) # Checks to make sure that previous cells are ran\r\n","\r\n","display_img(crop)"],"execution_count":null,"outputs":[]}]}