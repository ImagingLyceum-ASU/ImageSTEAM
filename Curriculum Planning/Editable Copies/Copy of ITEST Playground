{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ITEST Playground","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMZiMZlFHAOkBbFCjAVSJz5"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"23lPyZE4MQUh","colab":{"base_uri":"https://localhost:8080/","height":34},"cellView":"form","executionInfo":{"status":"ok","timestamp":1613111601184,"user_tz":420,"elapsed":2513,"user":{"displayName":"Michael Li","photoUrl":"","userId":"16803643686007598062"}},"outputId":"2c5412ef-f21c-46a1-8b35-44251460116a"},"source":["#@title Test Hiding Code\n","test_variable = \"\" #@param {type:\"string\"}\n","from IPython.display import display, Javascript, HTML\n","from google.colab.output import eval_js\n","from base64 import b64decode\n","import time\n","import cv2\n","import matplotlib.pyplot as plt\n","\n","from IPython.display import HTML\n","import os\n","\n","def display_image(a, title = \"Original\"):\n","    a = cv2.cvtColor(a, cv2.COLOR_BGR2RGB)\n","    plt.imshow(a), plt.title(title)\n","    plt.show()\n","\n","def record_video(filename='video.mp4'):\n","  # Credit: https://github.com/emilyxxie/colab_utils_and_snippets/blob/master/video_webcam_snippets.ipynb\n","  # This function uses the take_photo() function provided by the Colab team as a  \n","  # starting point, along with a bunch of stuff from Stack overflow, and some sample code \n","  # from: https://developer.mozilla.org/enUS/docs/Web/API/MediaStream_Recording_API\n","  # https://stackoverflow.com/questions/62529304/is-there-any-way-to-capture-live-video-using-webcam-in-google-colab\n","\n","  js = Javascript(\"\"\"\n","    async function recordVideo() {\n","      const options = { mimeType: \"video/webm; codecs=vp9\" };\n","      const div = document.createElement('div');\n","      const capture = document.createElement('button');\n","      const stopCapture = document.createElement(\"button\");\n","      capture.textContent = \"Start Recording\";\n","      capture.style.background = \"green\";\n","      capture.style.color = \"white\";\n","\n","      stopCapture.textContent = \"Stop Recording\";\n","      stopCapture.style.background = \"red\";\n","      stopCapture.style.color = \"white\";\n","      div.appendChild(capture);\n","\n","      const video = document.createElement('video');\n","      const recordingVid = document.createElement(\"video\");\n","      video.style.display = 'block';\n","\n","      const stream = await navigator.mediaDevices.getUserMedia({audio:true, video: true});\n","      let recorder = new MediaRecorder(stream, options);\n","      document.body.appendChild(div);\n","      div.appendChild(video);\n","      video.srcObject = stream;\n","      video.muted = true;\n","      await video.play();\n","\n","      // Resize the output to fit the video element.\n","      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);\n","\n","      await new Promise((resolve) => {\n","        capture.onclick = resolve;\n","      });\n","      recorder.start();\n","      capture.replaceWith(stopCapture);\n","      await new Promise((resolve) => stopCapture.onclick = resolve);\n","      recorder.stop();\n","\n","      let recData = await new Promise((resolve) => recorder.ondataavailable = resolve);\n","      let arrBuff = await recData.data.arrayBuffer();\n","      stream.getVideoTracks()[0].stop();\n","      div.remove();\n","\n","      let binaryString = \"\";\n","      let bytes = new Uint8Array(arrBuff);\n","      bytes.forEach((byte) => {\n","        binaryString += String.fromCharCode(byte);\n","      })\n","      return btoa(binaryString);\n","    }\n","    \"\"\")\n","  try:\n","    display(js)\n","    data = eval_js('recordVideo({})')\n","    binary = b64decode(data)\n","    with open(filename, \"wb\") as video_file:\n","      video_file.write(binary)\n","    print(\n","        f\"Finished recording video. Saved binary under filename in current working directory: {filename}\"\n","    )\n","  except Exception as err:\n","      # In case any exceptions arise\n","      print(str(err))\n","  return filename\n","  \n","def progress(value, max=100):\n","    return HTML(\"\"\"\n","        <progress\n","            value='{value}'\n","            max='{max}',\n","            style='width: 100%'\n","        >\n","            {value}\n","        </progress>\n","    \"\"\".format(value=value, max=max))\n","\n","out = display(progress(0, 100), display_id=True)\n","for ii in range(101):\n","    time.sleep(0.02)\n","    out.update(progress(ii, 100))"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","        <progress\n","            value='100'\n","            max='100',\n","            style='width: 100%'\n","        >\n","            100\n","        </progress>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"i2yPg2UzMW8M"},"source":["# Run the function, get the video path as saved in your notebook, and play it back here.\n","\n","video_width = 300\n","\n","video_path = record_video()\n","video_file = open(video_path, \"r+b\").read()\n","\n","video_url = f\"data:video/mp4;base64,{b64encode(video_file).decode()}\"\n","HTML(f\"\"\"<video width={video_width} controls><source src=\"{video_url}\"></video>\"\"\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","id":"gOKj6y4drn-T"},"source":["#@title Test Form\n","option = \"multiply it by 2\" #@param [\"change brightness\", \"multiply it by 2\"]\n","#@markdown Cell needs to be reran unfortunately for the code to work\n","video = cv2.VideoCapture('video.mp4')\n","\n","w = int(video.get(3))\n","h = int(video.get(4))\n","frame_size = (w,h)\n","\n","frames_list = []\n","\n","ret, frame = video.read()\n","\n","while ret:\n","    ret, frame = video.read()\n","    # frames_counter = frames_counter + 1\n","    if ret:\n","        frames_list.append(frame)\n","    else:\n","        break\n","\n","# This was set to 60 by default, may vary from webcam to webcam\n","fps = 15\n","\n","# ffmpeg for adding audio to the output file, needs some tweaking\n","out = cv2.VideoWriter('output_video.mp4',cv2.VideoWriter_fourcc(*'MP4V'), fps, frame_size)\n","if (option == 'change brightness'):\n","  for f in frames_list:\n","      f = cv2.cvtColor(f, cv2.COLOR_BGR2HSV)\n","      # Modifies the brightness\n","      value = 100 #whatever value to add\n","      f[:,:,0] += value\n","      f = cv2.cvtColor(f, cv2.COLOR_HSV2BGR)\n","      \n","      out.write(f)\n","else:\n","  # Ok this is pretty scary \n","  for f in frames_list:\n","      f[:,:,0] = (f[:,:,0].astype('float64') * 2).astype('uint8')\n","      f[:,:,1] = (f[:,:,1].astype('float64') * 2).astype('uint8')\n","      f[:,:,2] = (f[:,:,2].astype('float64') * 2).astype('uint8')\n","      f = cv2.cvtColor(f, cv2.COLOR_HSV2BGR)\n","      \n","      out.write(f)\n","\n","out.release()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":321,"output_embedded_package_id":"1HnI_bE_8jyUIieVgNcjzXKBnrHcER2gT"},"id":"EOgrxwxk7g1i","executionInfo":{"status":"ok","timestamp":1613112592684,"user_tz":420,"elapsed":5402,"user":{"displayName":"Michael Li","photoUrl":"","userId":"16803643686007598062"}},"outputId":"cc1233b0-507d-40b8-bc6e-008f7c61b32a"},"source":["# < Currently, we need to compress the video file to play it in google colaboratory, if the format is not supported. > \r\n","# https://stackoverflow.com/questions/57377185/how-play-mp4-video-in-google-colab\r\n","\r\n","if os.path.exists(\"/content/output_compressed.mp4\"):\r\n","  os.remove(\"/content/output_compressed.mp4\")\r\n","\r\n","# Input video path\r\n","save_path = \"/content/output_video.mp4\"\r\n","\r\n","# Compressed video path\r\n","compressed_path = \"/content/output_compressed.mp4\"\r\n","\r\n","os.system(f\"ffmpeg -i {save_path} -vcodec libx264 {compressed_path}\")\r\n","\r\n","mp4 = open(compressed_path,'rb').read()\r\n","data_url = \"data:video/mp4;base64,\" + b64encode(mp4).decode()\r\n","HTML(\"\"\"\r\n","<video width=400 controls>\r\n","      <source src=\"%s\" type=\"video/mp4\">\r\n","</video>\r\n","\"\"\" % data_url)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"Qwg3PIM9Zvmj"},"source":["[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/C0DPdy98e4c/0.jpg)](https://www.youtube.com/watch?v=C0DPdy98e4c)"]},{"cell_type":"markdown","metadata":{"id":"vAzXp3jFN2Xx"},"source":["# Test Cell Run Order"]},{"cell_type":"code","metadata":{"id":"zBzR1pKLN5Hm"},"source":["executed_cells = {}\r\n","\r\n","# This will also remember if they ran it in the past \r\n","def check_cell(num):\r\n","    if len(executed_cells) < num :\r\n","      print('It looks like you tried to run cell ' + str(num) + ', but you should run them in order! Make sure you ran all previous cells at least once.')\r\n","      raise\r\n","    elif str(num) not in executed_cells.keys():\r\n","      executed_cells[str(num)] = num\r\n","\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5vzwqTEqN6ou"},"source":["check_cell(0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7863MTifN7gW"},"source":["check_cell(1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FDN-6ltxN8Ti"},"source":["check_cell(10)"],"execution_count":null,"outputs":[]}]}